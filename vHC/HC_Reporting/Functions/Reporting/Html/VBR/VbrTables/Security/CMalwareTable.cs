using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VeeamHealthCheck.Functions.Reporting.CsvHandlers;
using VeeamHealthCheck.Functions.Reporting.Html.Shared;

namespace VeeamHealthCheck.Functions.Reporting.Html.VBR.VbrTables.Security
{
    internal class CMalwareTable
    {
        private CHtmlFormatting _form = new();
        public CMalwareTable()
        {
            
        }
        public  string MalwareTable()
        {
            string t = "";
            try
            {
                CCsvParser c = new();
                var m = c.MalwareInfo();
                CMalwareObject mo = m.FirstOrDefault();


                 
                 t = @"<br><h3>Malware Detection</h3>";
                t += _form.Table();
                t += _form.TableHeader("Malware Feature", "Lists a Veeam Backup & Replication Feature for Malware detection and if the feature is in use.");
                t += _form.TableHeader("Details", "Details of the Malware Detection feature.");
                t += _form.TableBodyStart();
                t += "<tr>";
                
                t += _form.TableData("Inline Entropy Analysis", "Details if Inline Entropy Analysis is enabled.");
                string inlineScantoolTip = "Inline Malware Scan is a feature that scans files for malware during backup and replication jobs. This feature is disabled by default. If you disable this feature, Veeam Backup & Replication will not scan files for malware during backup and replication jobs. Be aware that it may increase CPU usage (10-15% on average) on the backup proxy or Veeam agent, depending on the workload type and amount of data.";
                t += mo.InlineMalwareScanEnabled ? _form.TableData(_form.True, inlineScantoolTip) : _form.TableData(_form.False, inlineScantoolTip);
                t += "</tr>";
                t += "<tr>";
                
                string sensitivityToolTip = "The Sensitivity setting defines the level of sensitivity for entropy scans. The Sensitivity setting is used to determine the entropy threshold that Veeam Backup & Replication uses to detect potentially malicious files. The Sensitivity setting can be set between Low, Normal or Extreme. The default Sensitivity setting is Normal.";

                t += _form.TableData("Entropy Scan Sensitivity", "Level of sensitivity for entropy scans");
                if (mo.InlineMalwareScanEnabled)
                {
                    t += _form.TableData(mo.Sensitivity, sensitivityToolTip);
                }
                else
                {
                    t += _form.TableData("N/A", sensitivityToolTip);
                }

                //t += _form.TableData(mo.Sensitivity, sensitivityToolTip);
                //t += mo.Sensitivity ? _form.TableData(_form.checkMark, sensitivityToolTip) : _form.TableData(_form.x, sensitivityToolTip);
                t += "</tr>";
                t += "<tr>";
                t += _form.TableData("Quick Backup on External Event", "Details if Quick Backup on External Event is enabled.");
                string quickBackupToolTip = "Quick Backup on External Event is a feature that allows you to create a backup of a VM when an external event is triggered via Veeam's Incident API. Quick Backup on External Event is disabled by default. ";
                t += mo.QuickBackupOnExternalEventEnabled ? _form.TableData(_form.True, quickBackupToolTip) : _form.TableData(_form.False, quickBackupToolTip);
                //t += _form.TableData(mo.QuickBackupOnExternalEventEnabled.ToString(), "");
                t += "</tr>";
                t += "<tr>";
                t += _form.TableData("Guest Index Scan", "Details if Guest Index Scan is enabled.");
                if(mo.GuestIndexScanEnabled == true)
                {
                    t += _form.TableData(_form.True, "");
                }
                else
                {
                    t += _form.TableData(_form.False, "");
                }
                t += "</tr>";
                t += "<tr>";
                t += _form.TableData("Guest Index Scan Enabled On Job(s)", "Details if Guest Index Scan is enabled on at least 1 job.");
                var jobCsv = c.JobCsvParser();
                t += jobCsv.Any(x => x.IndexingType != "None") ? _form.TableData(_form.True, "") : _form.TableData(_form.False, "");
                //t += _form.TableData("", "");
                t += "</tr>";
                t += "<tr>";
                t += _form.TableData("Update Extensions List Periodically", "Details if Update Extensions List Periodically is enabled.");
                string updateToolTip = "Update Extensions List Periodically is a feature that updates the list of file extensions that Veeam Backup & Replication considers as potentially dangerous. This feature is enabled by default. If you disable this feature, Veeam Backup & Replication will not automatically update the list of file extensions that it considers as potentially dangerous.";
                if (mo.GuestIndexScanEnabled)
                {
                    t += mo.UpdateExtensionsListPeriodically ? _form.TableData(_form.True, updateToolTip) : _form.TableData(_form.False, updateToolTip);
                }
                else
                {
                    t += _form.TableData("N/A", updateToolTip);
                }
                //t += mo.UpdateExtensionsListPeriodically ? _form.TableData(_form.checkMark, updateToolTip) : _form.TableData(_form.x, updateToolTip);
                //t += _form.TableData(mo.UpdateExtensionsListPeriodically.ToString(), "");
                t += "</tr>";
               // t += _form.bodyend;
                t += _form.EndTable();

                //t += @"<tr><td>Malware Detection</td><td>Malware Detection is not enabled.</td></tr>";
                //t += @"</tbody></table>";

            }
            catch(Exception e)
            {
                Console.WriteLine(e);
                throw;
            }





            return t;
        }
    }
}
