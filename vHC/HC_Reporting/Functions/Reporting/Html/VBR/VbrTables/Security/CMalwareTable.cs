using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VeeamHealthCheck.Functions.Reporting.CsvHandlers;
using VeeamHealthCheck.Functions.Reporting.Html.Shared;
using VeeamHealthCheck.Shared;
using VeeamHealthCheck.Shared.Logging;

namespace VeeamHealthCheck.Functions.Reporting.Html.VBR.VbrTables.Security
{
    internal class CMalwareTable
    {
        private CHtmlFormatting _form = new();
        private CLogger _log = CGlobals.Logger;
        public CMalwareTable()
        {

        }
        public string MalwareSettingsTable()
        {
            string t = "";
            try
            {
                CCsvParser c = new();
                var m = c.MalwareSettings().ToList();
                if (m == null)
                {
                    // log message about missing files
                    _log.Warning("Malware Settings CSV file is missing or empty. No data to display in Malware Settings table.");

                    return "";
                }

                CMalwareObject mo = m.FirstOrDefault();





                t = @"<br><h3>Malware Detection Settings</h3>";
                t += _form.Table();
                t += "<thead>";
                t += _form.TableHeaderLeftAligned("Malware Feature", "Lists a Veeam Backup & Replication Feature for Malware detection and if the feature is in use.");
                t += _form.TableHeader("Details", "Details of the Malware Detection feature.");
                t += "</thead>";
                t += _form.TableBodyStart();
                t += "<tr>";

                t += _form.TableDataLeftAligned("Inline Entropy Analysis", "Details if Inline Entropy Analysis is enabled.");
                string inlineScantoolTip = "Inline Malware Scan is a feature that scans files for malware during backup and replication jobs. This feature is disabled by default. If you disable this feature, Veeam Backup & Replication will not scan files for malware during backup and replication jobs. Be aware that it may increase CPU usage (10-15% on average) on the backup proxy or Veeam agent, depending on the workload type and amount of data.";
                //t += mo.InlineMalwareScanEnabled ? _form.TableData(_form.True, inlineScantoolTip) : _form.TableData(_form.False, inlineScantoolTip);
                t += mo.InlineMalwareScanEnabled ? _form.TableData(_form.True, inlineScantoolTip) : _form.TableData(_form.False, inlineScantoolTip);
                t += "</tr><tr>";

                string sensitivityToolTip = "The Sensitivity setting defines the level of sensitivity for entropy scans. The Sensitivity setting is used to determine the entropy threshold that Veeam Backup & Replication uses to detect potentially malicious files. The Sensitivity setting can be set between Low, Normal or Extreme. The default Sensitivity setting is Normal.";

                t += _form.TableDataLeftAligned("Entropy Scan Sensitivity", "Level of sensitivity for entropy scans");
                if (mo.InlineMalwareScanEnabled)
                {
                    t += _form.TableData(mo.Sensitivity, sensitivityToolTip);
                }
                else
                {
                    t += _form.TableData("N/A", sensitivityToolTip);
                }

                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Quick Backup on External Event", "Details if Quick Backup on External Event is enabled.");
                string quickBackupToolTip = "Quick Backup on External Event is a feature that allows you to create a backup of a VM when an external event is triggered via Veeam's Incident API. Quick Backup on External Event is disabled by default. ";
                t += mo.QuickBackupOnExternalEventEnabled ? _form.TableData(_form.True, quickBackupToolTip) : _form.TableData(_form.False, quickBackupToolTip);
                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Guest Index Scan", "Details if Guest Index Scan is enabled.");
                if (mo.GuestIndexScanEnabled == true)
                {
                    t += _form.TableData(_form.True, "");
                }
                else
                {
                    t += _form.TableData(_form.False, "");
                }
                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Guest Index Scan Enabled On Job(s)", "Details if Guest Index Scan is enabled on at least 1 job.");
                var jobCsv = c.JobCsvParser();
                t += jobCsv.Any(x => x.IndexingType != "None") ? _form.TableData(_form.True, "") : _form.TableData(_form.False, "");
                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Update Extensions List Periodically", "Details if Update Extensions List Periodically is enabled.");
                string updateToolTip = "Update Extensions List Periodically is a feature that updates the list of file extensions that Veeam Backup & Replication considers as potentially dangerous. This feature is enabled by default. If you disable this feature, Veeam Backup & Replication will not automatically update the list of file extensions that it considers as potentially dangerous.";
                if (mo.GuestIndexScanEnabled)
                {
                    t += mo.UpdateExtensionsListPeriodically ? _form.TableData(_form.True, updateToolTip) : _form.TableData(_form.False, updateToolTip);
                }
                else
                {
                    t += _form.TableData("N/A", updateToolTip);
                }
                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Threat Detection Engine", "Details if Inline Entropy Analysis is enabled.");
                string detectionEngineToolTip = "Is ThreatHunter or BYO AV selected?";
                t += _form.TableData(mo.DetectionEngine, detectionEngineToolTip);
                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Scan Archives", "Is the detection engine set to scan archive backups?");
                string ScanArchiveScantoolTip = "";
                t += (mo.ScanArchives ?? false) ? _form.TableData(_form.True, ScanArchiveScantoolTip) : _form.TableData(_form.False, ScanArchiveScantoolTip);
                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Notifications Recipient(s)", "Shows who recieves notifications about malware events");
                string notificationsToolTip = "Recipient(s) of malware notifications";
                t += _form.TableData(mo.NotificationOptions, notificationsToolTip);
                t += "</tr><tr>";

                //
                string iocEnabledToolTip = "Use Indicators of Compromise is a feature that allows you to scan files for indicators of compromise. This feature is disabled by default. If you enable this feature, Veeam Backup & Replication will scan files for indicators of compromise during backup and replication jobs.";
                t += _form.TableDataLeftAligned("Use Indicators of Compromise", "Details if Use Indicators of Compromise is enabled.");
                t += (mo.UseIndicatorsOfCompromiseEnabled ?? false) ? _form.TableData(_form.True, iocEnabledToolTip) : _form.TableData(_form.False, iocEnabledToolTip); t += "</tr><tr>";

                t += "</tr><tr>";

                t += _form.TableDataLeftAligned("Recon Installed:", "Is the Recon Scanner installed?");
                t += CGlobals.IsReconDetected ? _form.TableData(_form.True, "The Recon Scanner is installed and configured.") : _form.TableData(_form.False, "The Recon Scanner is not installed or configured.");
                t += "</tr><tr>";
                t += _form.TableDataLeftAligned("Recon Last Scan:", "The last time the Recon Scanner was run.");
                t += CGlobals.LastReconRun == DateTime.MinValue ? _form.TableData("N/A", "The Recon Scanner has not been run yet.") : _form.TableData(CGlobals.LastReconRun.ToString("yyyy-MM-dd HH:mm:ss"), "The last time the Recon Scanner was run.");

                t += "</tr>";
                t += _form.EndTable();


            }
            catch (Exception e)
            {
                _log.Error("Failed to parse Malware Settings table:");
                _log.Error(e.Message);
                throw;
            }





            return t;
        }
        public string MalwareExclusionsTable()
        {
            string t = "";
            try
            {
                CCsvParser c = new();
                var m = c.MalwareExclusions().ToList();
                //CMalwareObject mo = m.FirstOrDefault();



                t = @"<br><h3>Malware Excluded Objects</h3>";
                t += _form.Table();
                t += "<thead>";
                t += _form.TableHeaderLeftAligned("Excluded Item", "Name of the excluded sytem.");
                t += _form.TableHeader("Platform", "Platform of the excluded item.");
                t += "</thead>";
                t += _form.TableBodyStart();

                // if the list is empty, add a row that says "No Exclusions Found"
                if (m.Count == 0)
                {
                    t += "<tr>";
                    t += _form.TableDataLeftAligned("No Exclusions Found", "");
                    t += _form.TableData("", "");
                    t += "</tr>";
                }
                else
                {
                    foreach (var obj in m)
                    {
                        string name = obj.Name;
                        if (CGlobals.Scrub) { name = CGlobals.Scrubber.ScrubItem(name, Scrubber.ScrubItemType.Server); }
                        t += "<tr>";
                        t += _form.TableDataLeftAligned(name, "");
                        t += _form.TableData(obj.Platform, "");
                        t += "</tr>";
                    }
                }


                t += _form.EndTable();


            }
            catch (Exception e)
            {
                _log.Error("Failed to parse Malware Exclusions table:");
                _log.Error(e.Message);
                throw;
            }





            return t;
        }
        public string MalwareEventsTable()
        {
            string t = "";
            try
            {
                CCsvParser c = new();
                var lst = c.MalwareEvents().ToList();

                // select items from the list where DetectionTime is within range of CGlobals.ReportDays
                // m = m.Where(x => new TimeSpan(DateTime.Parse(x.DetectionTime).Ticks).TotalDays >= CGlobals.ReportDays).ToList();
                List<CMalwareEvents> m = new();
                foreach (var item in lst)
                {
                    item.DetectionTime = item.DetectionTime.Replace("T", " ").Replace("Z", "");
                    var dt = DateTime.Parse(item.DetectionTime);
                    TimeSpan diff = DateTime.Now - dt;
                    if (diff.TotalDays <= CGlobals.ReportDays)
                    {
                        m.Add(item);
                    }
                    else
                    {
                        //do nothing   
                    }
                }

                // reduce the m variable to a smaller subset where m[x].DetectionTime is converted to a datetime and then checked to be equal to or less than the CGlobals.ReportDays Range
                //var testList = m = m.Where(x => DateTime.Parse(x.DetectionTime) <= DateTime.Now.AddDays(-CGlobals.ReportDays)).ToList();



                t = @"<br><h3>Malware: Events Summary</h3>";
                t += _form.Table();
                t += "<thead>";
                t += _form.TableHeaderLeftAligned("Event/Info", "");
                t += _form.TableHeader("Count", "Details of the Malware Detection feature.");
                t += "</thead>";
                //t += _form.TableHeader("Info", "Details of the Malware Detection feature.");
                t += _form.TableBodyStart();

                // List<string> messages = m.Select(x => x.Message).Distinct().ToList();
                t += "<tr>";
                t += _form.TableDataLeftAligned("Total Events", "");
                t += _form.TableData(m.Count.ToString(), "");
                //t += _form.TableData("", "");
                t += "</tr>";
                t += "<tr>";
                t += _form.TableDataLeftAligned("Total Objects Flagged", "");
                t += _form.TableData(m.Select(x => x.ObjectId).Distinct().Count().ToString(), "");
                //t += _form.TableData(String.Join(",</br>", m.Select(x => x.ObjectName).Distinct().ToList()), "");
                t += "</tr>";
                t += "<tr>";
                t += _form.TableDataLeftAligned("Total Unique Event Types", "");
                t += _form.TableData(m.Select(x => x.Message).Distinct().Count().ToString(), "");
                //t += _form.TableData(String.Join(",</br>", m.Select(x => x.Message).Distinct().ToList()), "");
                t += "</tr>";



                t += _form.EndTable();


            }
            catch (Exception e)
            {
                _log.Error("Failed to parse Malware Events table:");
                _log.Error(e.Message);
                throw;
            }





            return t;
        }
        public string MalwareInfectedObjectsTable()
        {
            string t = "";
            try
            {
                CCsvParser c = new();
                var m = c.MalwareInfectedObjects().ToList();
                //CMalwareObject mo = m.FirstOrDefault();



                t = @"<br><h3>Malware: Infected Objects</h3>";
                t += _form.Table();
                t += "<thead>";
                // create table headers like t += _form.TableHeader() for these: ObjectId	ObjectName	DetectedDateTime	Severity	Types	Platform	ObjectHostName
                // t += _form.TableHeader("ObjectId", "The ID of the infected object.");
                t += _form.TableHeaderLeftAligned("ObjectName", "The name of the infected object.");
                t += _form.TableHeader("DetectedDateTime", "The date and time the object was detected.");
                t += _form.TableHeader("Severity", "The severity of the infection.");
                t += _form.TableHeader("Types", "The type of infection.");
                t += _form.TableHeader("Platform", "The platform of the infected object.");
                t += _form.TableHeader("ObjectHostName", "The host name of the infected object.");
                t += "</thead>";
                t += _form.TableBodyStart();

                // if the list is empty, add a row that says "No Infected Objects Found"
                if (m.Count == 0)
                {
                    t += "<tr>";
                    t += _form.TableDataLeftAligned("No Infected Objects Found",
                        "");
                    t += _form.TableData("", "");
                    t += _form.TableData("", "");
                    t += _form.TableData("", "");
                    t += _form.TableData("", "");
                    t += _form.TableData("", "");
                    t += "</tr>";
                }
                // else, loop through the list and add each item to the table
                else
                {
                    foreach (var obj in m)
                    {
                        string name = obj.ObjectName;
                        string host = obj.ObjectHostName;
                        if (CGlobals.Scrub)
                        {
                            name = CGlobals.Scrubber.ScrubItem(name, Scrubber.ScrubItemType.Server);
                            host = CGlobals.Scrubber.ScrubItem(host, Scrubber.ScrubItemType.Server);
                        }
                        t += "<tr>";
                        //t += _form.TableData(obj.ObjectId, "");
                        t += _form.TableDataLeftAligned(name, "");
                        t += _form.TableData(obj.DetectedDateTime, "");
                        t += _form.TableData(obj.Severity, "");
                        t += _form.TableData(obj.Types, "");
                        t += _form.TableData(obj.Platform, "");
                        t += _form.TableData(host, "");
                        t += "</tr>";

                    }
                }


                t += _form.EndTable();


            }
            catch (Exception e)
            {
                _log.Error("Failed to parse Malware Infected Objects table:");
                _log.Error(e.Message);

                throw;
            }





            return t;
        }


    }

    public class UniversalCollection<T>
    {
        private List<T> items = new List<T>();

        public void Add(T item)
        {
            items.Add(item);
        }

        public IEnumerable<T> GetItems()
        {
            return items;
        }
    }
}
