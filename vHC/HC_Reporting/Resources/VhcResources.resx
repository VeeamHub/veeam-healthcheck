<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GuiAcceptButton" xml:space="preserve">
    <value>Accept Terms</value>
  </data>
  <data name="GuiImportButton" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="GuiInstCaveat1" xml:space="preserve">
    <value>* If opted to remove sensitive data types, only HTML report will be cleansed. See: </value>
  </data>
  <data name="GuiInstCaveat2" xml:space="preserve">
    <value>"** Note, in larger environments, this tool can take up to 3 hours to complete."</value>
  </data>
  <data name="GuiInstHeader" xml:space="preserve">
    <value>Instructions:</value>
  </data>
  <data name="GuiInstLine1" xml:space="preserve">
    <value>1. Accept Terms</value>
  </data>
  <data name="GuiInstLine2" xml:space="preserve">
    <value>2. Click RUN</value>
  </data>
  <data name="GuiInstLine3" xml:space="preserve">
    <value>3. Upon completion, Windows Explorer will open to the output directory. (If enabled, HTML report will be shown)</value>
  </data>
  <data name="GuiInstLine4" xml:space="preserve">
    <value>4. Review the report as desired</value>
  </data>
  <data name="GuiInstLine5" xml:space="preserve">
    <value>5. Capture output from C:\temp\vHC* - or whichever directory was specified.</value>
  </data>
  <data name="GuiInstLine6" xml:space="preserve">
    <value>6. Notify your Veeam SE and/or send them the results for review</value>
  </data>
  <data name="GuiOptionsHeader" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="GuiOutPath" xml:space="preserve">
    <value>Output path</value>
  </data>
  <data name="GuiRunButton" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="GuiSensData" xml:space="preserve">
    <value>Remove sensitive data types from report</value>
  </data>
  <data name="GuiShowFiles" xml:space="preserve">
    <value>Show files on completion</value>
  </data>
  <data name="GuiShowHtml" xml:space="preserve">
    <value>Show HTML report upon completion</value>
  </data>
  <data name="HtmlHeader" xml:space="preserve">
    <value>Health Check Report</value>
  </data>
  <data name="HtmlIntroLine1" xml:space="preserve">
    <value>- This report provides data and insight into your Veeam Backup and Replication (VBR) deployment. The information provided here is intended to be used in collaboration with your Veeam representative.</value>
  </data>
  <data name="HtmlIntroLine2" xml:space="preserve">
    <value>- The raw data is captured in CSV format and is accessible locally in the Export Folder. CSV will let you manipulate the data in tools such as Excel.</value>
  </data>
  <data name="HtmlIntroLine3" xml:space="preserve">
    <value>- Additional information on individual job sessions can be found in the &lt;a href="C:\temp\vHC\JobSessionReports"&gt; output folder at C:\temp\vHC\JobSessionReports</value>
  </data>
  <data name="HtmlIntroLine4" xml:space="preserve">
    <value>- NOTE: During mouseover, a tool tip may appear containing explanatory data of the table header or data column.</value>
  </data>
  <data name="HtmlIntroLine5" xml:space="preserve">
    <value>- \bNOTE: The tool you ran to generate this report is completely self-contained, does not ‘phone-home’ and was only executed on your Veeam Backup and Replication server. It queries the VBR database, registry, configuration and log files. It does not require access to vCenter or any other infrastructure.</value>
  </data>
</root>